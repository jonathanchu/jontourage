---
layout: post
title: Virtualenv and pip Basics
publish: false3
---

When I'm doing any kind of Python development, one tool I find indispensable is [virtualenv](http://pypi.python.org/pypi/virtualenv).  Virtualenv, along with [virtualenvwrapper](http://www.doughellmann.com/projects/virtualenvwrapper/) and [pip](http://pypi.python.org/pypi/pip), make for a great way to completely isolate your development environment.

When I first started out developing Django sites, I used to use [easy_install](http://packages.python.org/distribute/easy_install.html) to install all packages I needed to the system-wide `site-packages` directory.  Even as a newbie to Django, I knew this wasn't good practice, but it ensured that commonly used libraries such as `MySQL-python` was available without any extra configuration with new projects.  Regardless, completely isolating your environment with virtualenv ensures that a) you don't install conflicting packages and b) any bugs introduced in your project can be traced back directly to the packages you installed.  Also, a huge benefit is that it makes installing multiple versions of Python super easy without having to create any symlinks.

Getting started with Virtualenv and pip
---------------------------------------

First thing you need to do is install pip.  If you have setuptools installed, which you most likely will with most platforms, you can install pip through easy_install

    :::python
    easy_install pip

Next, you need to install virtualenv with pip.

    :::python
    pip install virtualenv

Finally, I would highly recommend installing virtualenvwrapper as it makes it much easier to create and start virtual environments.

    :::python
    pip install virtualenvwrapper

As part of the install instructions for virtualenvwrapper, you need to add this to your .bash_profile

    :::python
    # virtualenv
    export WORKON_HOME=$HOME/.virtualenvs
    source /Library/Frameworks/Python.framework/Versions/2.7/bin/virtualenvwrapper.sh

Please note that this path may differ depending on what version of Python you have.  Also, I like to keep all my virtualenvs in a directory called `.virtualenvs` in my home directory, but this may differ for you if you choose to keep your virtual environments in a different directory.

Make sure you source your new `.bash_profile`

    :::python
    source ~/.bash_profile

...and that's it!  Now you're all set to start using virtual environments!

Here is a brief overview of how I start all new projects with virtualenv and pip:

    :::python
    hello



